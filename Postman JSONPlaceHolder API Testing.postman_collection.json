{
	"info": {
		"_postman_id": "327e09e8-e55a-4279-95e9-6c832ca0618e",
		"name": "JSONPlaceHolder API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "30362038"
	},
	"item": [
		{
			"name": "Get posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has userId key\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property(\"userId\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains a specific userId\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.map(post => post.userId)).to.include(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/posts"
			},
			"response": []
		},
		{
			"name": "Get posts 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has id key\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains 'title'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/posts/1"
			},
			"response": []
		},
		{
			"name": "Get posts Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has postId key\", function () {\r",
							"    pm.expect(pm.response.json()[0]).to.have.property(\"postId\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/posts/1/comments"
			},
			"response": []
		},
		{
			"name": "Put Post",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 1,\r\n  \"title\": \"updated title\",\r\n  \"body\": \"updated body\",\r\n  \"userId\": 1\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://jsonplaceholder.typicode.com/posts/1"
			},
			"response": []
		},
		{
			"name": "Delete Request",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/posts/1"
			},
			"response": []
		},
		{
			"name": "Post Request",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "  {\r\n    \"id\": 1,\r\n    \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\r\n    \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://jsonplaceholder.typicode.com/posts"
			},
			"response": []
		},
		{
			"name": "Patch Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Title is updated\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.title).to.eql(\"Updated Title\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Updated Title\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://jsonplaceholder.typicode.com/posts/1"
			},
			"response": []
		},
		{
			"name": "Get Album Photos Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Multiple assertions\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"    pm.response.to.have.header(\"Content-Type\"); \r",
							"    pm.expect(pm.response.responseTime).to.be.below(300); \r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0].userId).to.eql(1);     pm.expect(responseJson[0]).to.have.property(\"title\"); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/users/1/albums"
			},
			"response": []
		},
		{
			"name": "Get  User Album",
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/albums/1/photos"
			},
			"response": []
		},
		{
			"name": "Get User Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has correct userId\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0].userId).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Title field exists in the response\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0]).to.have.property(\"title\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/users/1/todos"
			},
			"response": []
		},
		{
			"name": "Get User Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct userId\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0].userId).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Title field exists in the response\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson[0]).to.have.property(\"title\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://jsonplaceholder.typicode.com/users/1/posts"
			},
			"response": []
		}
	]
}